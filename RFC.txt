Network Working Group                Y.Baurens, D.Eglem, M.Lumeau, M.Pédoussaut
Request for Comments: 666                            
                                                                 February 2013


                        DNC - Dogs Now Chat

Status of This Memo

  This memo defines an Experimental Protocol for the Internet
  community.  Discussion and suggestions for improvement are forbidden.
  Distribution of this memo is limited to 666 copies.

Abstract

  The DNC protocol was developed over the last 400 years since it was
  first dreamt as a mean for users on a network to chat amongst themselves.
  Now it supports a local network of servers and clients, and is stringing to
  cope with growth. Over the past 0.2 years, the average number of users
  connected to the main DNC network has grown by a factor of 1.

  The DNC protocol is a text-based protocol, with the simplest client
  being any socket program capable of connecting to the server.

Table of Contents

  1.  INTRODUCTION
     1.1  Servers
     1.2  Clients
     1.3 Kennels
        1.3.1 What is it ?
        1.3.2 Public kennel
        1.3.3 Private kennels
     
  2. THE DNC SPECIFICATION
      2.1 List of DNC commands 
      2.2 Commands specifications
        2.2.1 Simple message
        2.2.2 /GO command    
        2.2.3 /AFM command   
        2.2.4 /BACK command  
        2.2.5 /COLLAR command
        2.2.6 /BARK command  
        2.2.7 /PET command   
        2.2.8 /SNIFF command 
        2.2.9 /LICK command  
        2.2.10 /BITE command 
        2.2.11 /FETCH command
        2.2.12 /HELP command 
        2.2.13 Unknown command
      2.3 Operating specifications

1.  INTRODUCTION

  The DNC (Dogs Now Chat) protocol has been designed over a number of minutes
  for use with text based conferencing. This document describes the
  current DNC protocol.

  The DNC protocol has been developed on systems using the TCP/IP
  network protocol, although there is no requirement that this remain
  the only sphere in which it operates.

  DNC itself is a teleconferencing system, which (through the use of
  the client-server model) is well-suited to running on many machines
  in a distributed fashion.  A typical setup involves a single process
  (the server) forming a central point for clients (or other servers)
  to connect to, performing the required message delivery/multiplexing
  and other functions.

1.1 Servers

  The server forms the backbone of DNC, providing a point to which
  clients may connect to to talk to each other. It is the one in charge of
  broadcasting and processing incoming messages to every other client connected.

1.2 Clients

  A client is anything connecting to a server that is not another
  server.  Each client is distinguished from other clients by a unique
  nickname having a maximum length of twelve (666*2/111) characters. See the
  protocol grammar rules for what may and may not be used in a
  nickname. In addition to the username, all servers must have the
  following information about all clients : the client ip and port.

  Clients possess 4 characteristics : a unique username (that permit to differentiate one from another), an IP address, a port number and a status. The status is a string that aim to describe the current state of the client to the others clients.

1.3 Kennels

  1.3.1 What is it ?
    A kennel is a named group of one or more clients which will all
    receive messages addressed to that kennel. Kennels are representated
    by a string containing up to eighteen (666*3/111) alphanumeric characters.
    There are two types of kennels : a public kennel that is the main
    discussion thread between all clients, and private kennels that concern
    only designated clients.

  1.3.2 Public kennel
   1.3.2.1 Creation
     The main thread of discussion is created upon the start of the
     server (see up). It contains all the clients that are connected to
     the server.

  1.3.3.2 Existance
     It exists along with the server.

  1.3.3.3 Destruction
     The kennel ceases to exist when the server stops.

  1.3.3 Private kennels
   1.3.3.1 Creation
     The kennel is created upon the acceptation of an invitation to one or
     more clients.
  
   1.3.3.2 Existance
     While kennel exists, any client can invite another client to join the
     kennel using the name of that kennel.

   1.3.3.3 Destruction
     The kennel ceases to exist when the last client leaves it.





2. The DNC Specification


: broadcast du message dans le bon kennel
001 <kennel> <username> : broadcast leave message
002 <kennel> <username> : indique que <username> est AFM
003 kennel <username> : indique que <username> n'est plus AFM
004 public_kennel <old_username> <new_username> : indique que <old_username> aka <new_username>
005 kennel <message> : broadcast du MESSAGE dans le bon kennel

006 kennel <username1> <username2> : afficher username1 pet username2
007 public_kennel : “It’s ME ! James Bond !”
008 sniff <list users>
009 lick
010 bite
011 fetch
012 help

2.2 List of DNC commands

  The client dispose of a certain number of actions that are started by the
  use of a specific syntax. The following key words lists all the possible
  commands of a client :

      /GO             : Cut connection with the server

      /AFM          : Meaning Away From Master, it changes the client status to signify to the others clients that he is not available and may not participate to the discussions while in that state
      /BACK           : Resume from AFM state to the standard status. It will also notify the others users that the client is now available.
      /COLLAR <name>  : Change the client username to the specified name

      /BARK <message> : Send the specified message with a notification for the client to apply a special transformation to the message.
      /PET <name>     : Pet the specified client by sending him a notification

      /SNIFF          : List all connected clients

      /LICK <kennel> <name[,name2,...]> : Start/Invite a private kennel with the
                              specified client(s). Note that the kennel is created if it doesn't already exist.
      /BITE : Leave the private kennel

      /FETCH < username> <file> : Send a file to the specified client
      /HELP : Send the list of commands

Note that all the commands are not case sensitive.

2.3 Commands specifications

    The following describes the format in which messages are sent and receive between the clients and the server.

Note that, in the current version, everything that may follow status commands (e.g.: GO, AFM, BITE,...) and the HELP command will be ignored by the server.   

 2.3.1 Simple message
    C: MSG <kennel> <message>
    S: 000 <kennel> <message>

 2.3.2 /GO command
    C: CMD <kennel> GO
    S : 001 <C>
       
2.3.3 /AFM command
    C: CMD <kennel> AFM
[client status : BACK]
    S: 002 <kennel> <C>
[client status : AFM]
    S->C: 102 <kennel>
   
 2.3.4 /BACK command
    C: CMD <kennel> BACK
[client status : AFM]
    S: 003 <kennel> <C>
[client status : BACK]
    S->C: 103 <kennel>

 2.3.5 /COLLAR command
    C: CMD <kennel> COLLAR < username>
[free username]
    S: 004 <public_kennel> <old_username> <new_username>
[existing username]
    S->C: 104 <kennel> <new_username>
[empty string for username]
    S->C:  105 <kennel>

 2.3.6 /BARK command
    C: CMD <kennel> BARK <message>

S: 005 <kennel> <message>

 2.3.7 /PET command
    C1: CMD <kennel> PET <C2>

[C2 is connected]

    S : 006 <kennel> <C1> <C2>

[C2 doesn’t exist]

    S->C1 : 106 <kennel> <C2>

 2.3.8 /SNIFF command
    C: CMD <kennel> SNIFF
    S : 008 <kennel> <C1[,C2,C3,...]>

 2.3.9 /LICK command
    C1: CMD <kennel> LICK <kennel1> <C2>
    S->C2 : 009 <kennel> <C1>

[Acceptation]

C2->S : CMD ACCEPT_LICK <C1>

S->C1 : 209 <C2>

[Refusal]

C2->S : CMD REFUSE_LICK <C1>

S->C1 : 309 <C2>

[Bad command usage]

    C1: CMD <kennel> LICK

    S->C1: 100 <kennel>

2.3.10 /BITE command
    C: CMD <kennel> BITE
    [user is in a private kennel]
        S : 010 <kennel> <C>
    [user is not in a private kennel]
        S : 110 <kennel> <C>

 2.3.11 /FETCH command
    C1: <kennel> CMD FETCH < C2> <file>
    S->C2 : 011 <kennel> <C1> <file>

[Acceptation]

C2->S : CMD ACCEPT_FETCH <C1> <file>

S->C1 : 211 <C2> <file>

[Refusal]

C2->S : CMD REFUSE_FETCH <C1> <file>

S->C1 : 311 <C2> <file>

[Bad command usage]

C: CMD <kennel> FETCH

S : 100 <kennel>

 2.3.12 /HELP command
    C: CMD <kennel> HELP
    S : 012 <kennel> <CMD1[,CMD2,CMD3,...]>
          
 2.3.13 Unknown command
    C: CMD <kennel> <unkown cmd>
    S : 404 <kennel>


2.4 Operating specifications

CMD is the flag for commands
MSG is the flag for simple messages

Server : Process messages depending on the key word (CMD/MSG)


Restrictions:
    username : alphanum
    kennel : alphanum
                 