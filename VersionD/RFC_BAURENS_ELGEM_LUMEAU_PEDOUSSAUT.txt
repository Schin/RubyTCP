Network Working Group                Y.Baurens, D.Eglem, M.Lumeau, M.PÃ©doussaut
Request for Comments: 666                            
                                                                  February 2013


                          DNC - Dogs Now Chat
  ______                   _   _                 _____ _           _   
  |  _  \                 | \ | |               /  __ \ |         | |  
  | | | |___   __ _ ___   |  \| | _____      __ | /  \/ |__   __ _| |_ 
  | | | / _ \ / _` / __|  | . ` |/ _ \ \ /\ / / | |   | '_ \ / _` | __|
  | |/ / (_) | (_| \__ \  | |\  | (_) \ V  V /  | \__/\ | | | (_| | |_ 
  |___/ \___/ \__, |___/  \_| \_/\___/ \_/\_/    \____/_| |_|\__,_|\__|
               __/ |                                                  
              |___/                                                   
                   __,-----._                       ,-. 
               ,'   ,-.    \`---.          ,-----<._/ 
              (,.-. o:.`    )),"\\-._    ,'         `. 
             ('"-` .\       \`:_ )\  `-;'-._          \ 
            ,,-.    \` ;  :  \( `-'     ) -._     :   `: 
           (    \ `._\\ ` ;             ;    `    :    ) 
            \`.  `-.    __   ,         /  \        ;, ( 
             `.`-.___--'  `-          /    ;     | :   | 
               `-' `-.`--._          '           ;     | 
                     (`--._`.                ;   /\    | 
                      \     '                \  ,  )   : 
                      |  `--::----            \'   ;  ;| 
                      \    .__,-      (        )   :  :| 
                       \    : `------; \      |    |   ; 
                        \   :       / , )     |    |  ( 
                         \   \      `-^-|     |   / , ,\ 
                          )  )          | -^- ;   `-^-^' 
                       _,' _ ;          |    | 
                      / , , ,'         /---. : 
                      `-^-^'          (  :  :,' 
                                       `-^--' 


Status of This Memo

  This memo defines an Experimental Protocol for the Internet
  community.  Discussion and suggestions for improvement are forbidden.
  Distribution of this memo is limited to 666 copies.

Abstract

  The DNC protocol was developed over the last 400 years since it was
  first dreamt as a mean for users on a network to chat amongst themselves.
  Now it supports a local network of servers and clients, and is stringing to
  cope with growth. Over the past 0.2 years, the average number of users
  connected to the main DNC network has grown by a factor of 1.

  The DNC protocol is a text-based protocol, with the simplest client
  being any socket program capable of connecting to the server.

Table of Contents

  1.  INTRODUCTION
    1.1  Servers
    1.2  Clients
    1.3 Kennels
      1.3.1 What is it ?
      1.3.2 Public kennel
      1.3.3 Private kennels

  2. THE DNC SPECIFICATION
    2.1 Lists of DNC commands & codes
      2.1.1 Returned codes
      2.1.2 Commands
    2.2 Simple messages
    2.3 Operating specifications

1.  INTRODUCTION

  The DNC (Dogs Now Chat) protocol has been designed over a number of minutes
  for use with text based conferencing. This document describes the
  current DNC protocol.

  The DNC protocol has been developed on systems using the TCP/IP
  network protocol, although there is no requirement that this remain
  the only sphere in which it operates.

  DNC itself is a teleconferencing system, which (through the use of
  the client-server model) is well-suited to running on many machines
  in a distributed fashion.  A typical setup involves a single process
  (the server) forming a central point for clients (or other servers)
  to connect to, performing the required message delivery/multiplexing
  and other functions.

1.1 Servers

  The server forms the backbone of DNC, providing a point to which clients may 
  connect to to talk to each other. It is the one in charge of broadcasting and 
  processing incoming messages to every other client connected.
  It also keep a log of all conversation and date every event(message, command,
  connection,...) into a file.

1.2 Clients

  A client is anything connecting to a server that is not another
  server.  Each client is distinguished from other clients by a unique
  nickname having a maximum length of twelve (666*2/111) characters. See the
  protocol grammar rules for what may and may not be used in a
  nickname. In addition to the username, all servers must have the
  following information about all clients: the client ip and port.

  Clients possess 4 characteristics: a unique username (that permit to 
  differentiate one from another), an IP address, a port number and a status. 
  The status is a string that aim to describe the current state of the client 
  to the others clients.

  Client interface shall display all received messages with the reception time.
  A message is a sequence of characters (140 max) and ends with CRLF 
  (Carriage Return/Line Feed).

  The username is autogenerated by the server upon the first connection. The
  client will be able to change it thanks to the COLLAR command.

1.3 Kennels

  1.3.1 What is it ?

    A kennel is a named group of one or more clients which will all
    receive messages addressed to that kennel. Kennels are representated
    by a string containing up to eighteen (666*3/111) alphanumeric characters.
    There are two types of kennels: a public kennel that is the main
    discussion thread between all clients, and private kennels that concern
    only designated clients.

  1.3.2 Public kennel

    1.3.2.1 Creation
      The main thread of discussion is created upon the start of the
      server (see up). It contains all the clients that are connected to
      the server.

    1.3.3.2 Existance
      It exists along with the server.

    1.3.3.3 Destruction
      The kennel ceases to exist when the server stops.

  1.3.3 Private kennels

    1.3.3.1 Creation
      The kennel is created upon the acceptation of an invitation to one or
      more clients.

    1.3.3.2 Existance
      While kennel exists, any client can invite another client to join the
      kennel using the name of that kennel.

    1.3.3.3 Destruction
      The kennel ceases to exist when the last client leaves it.


2. The DNC Specification

2.1 Lists of DNC commands & codes

  2.1.1 Returned codes

  0xx : corresponds to a valid reponse
  1xx : signify that an error occured
  2xx : signify that a request has been accepted
  3xx : signify that a request has been rejected
  4xx : request corresponding to nothing known
  666 : Server shutting down

  See below for more precisions on each code.

  2.1.2 Commands

  The client dispose of a certain number of actions that are started by the
  use of a specific syntax. The format used by all client shall be "CMD" 
  followed by the current kennel name, followed by the command name and 
  possibles arguments. Each of these elements are to be separated by a single
  space.
  Note that every commands are not case sensitive.

    2.1.2.1 GO
      Arguments: none

      Restrictions: none

      Formats:
        C: CMD <kennel> GO
        S->C: 001

      Description: 
        Cut connection with the server.

      Complementary informations: 
        More advanced version may include an argument to display a custom 
        message to be displayed to other clients before disconnection.
        The current version will ignore everything that may follow the word GO.

                    ,              ,.==*Y;;=.,_            
                     `*+,,.,,.==*` .w*``      "**-          
                          ``"*===*"`   

    2.1.2.2 AFM 
      Arguments: none

      Restrictions:
        May only be given when status different from AFM.

      Formats:
        C: CMD <kennel> AFM
        [client status: BACK]
          S: 002 <kennel> <C>
        [client status: AFM]
          S->C: 101 <kennel>

      Description:
        Meaning Away From Master, it changes the client status to 
        signify to the others clients that he is not available and 
        may not participate to the discussions while in that state.

      Complementary informations:
        More advanced version may include an argument to display a custom 
        message.
        The current version will ignore everything that may follow the word GO.

                    ,              ,.==*Y;;=.,_            
                     `*+,,.,,.==*` .w*``      "**-          
                          ``"*===*"`   

    2.1.2.3 BACK 
      Arguments: none

      Restrictions:
        May only be given when status equals AFM.

      Formats:
        C: CMD <kennel> BACK
        [client status: AFM]
          S: 003 <kennel> <C>
        [client status: BACK]
          S->C: 102 <kennel>

      Description:
        Resume from AFM state to the default status. 
        It will also notify the others users that the client is now available.

      Complementary informations:
        More advanced version may include an argument to display a custom 
        message.
        More advanced version may implement other status and use this command
        to change back to the default status.
        The current version will ignore everything that may follow the word 
        BACK.

                    ,              ,.==*Y;;=.,_            
                     `*+,,.,,.==*` .w*``      "**-          
                          ``"*===*"`   

    2.1.2.4 COLLAR 
      Arguments: name

      Restrictions:
        Client status must be diferent to AFM.
        Given argument must be a valid username (12 alpha chars max).
        The username must not be already atributed to a client.

      Formats:
        C: CMD <kennel> COLLAR <username>
        [free valid username]
          S: 004 <public_kennel> <old_username> <new_username>
        [already existing username]
          S->C: 103 <kennel> <new_username>
        [invalid string for username]
          S->C: 104 <kennel> <invalid_name>
        [Bad command usage]
          C: CMD <kennel> COLLAR 
          S->C1: 100 <kennel>
        [AFM status]
          S->C:101 <kennel>

      Description:
        Change the client username to the specified name. 

      Complementary informations:
        More advanced version may forbid/reserve some usernames for various
        reasons.

                    ,              ,.==*Y;;=.,_            
                     `*+,,.,,.==*` .w*``      "**-          
                          ``"*===*"`   

    2.1.2.5 BARK
      Arguments: message

      Restrictions:
        Client status must be different from AFM.
        Message is submitted to the same restrictions as a standard message
        request.

      Formats:
        C: CMD <kennel> BARK <message>
        S: 005 <kennel> <message>
      [AFM status]
          S->C:101 <kennel>

      Description:
        Send the specified message with a notification for the client to apply 
        a special transformation to the message. 

      Complementary informations: none

                    ,              ,.==*Y;;=.,_            
                     `*+,,.,,.==*` .w*``      "**-          
                          ``"*===*"`   

    2.1.2.6 PET 
      Arguments: name

      Restrictions:
        Client status must be different from AFM.
        The username must correspond to an existing client.

      Formats:
        C1: CMD <kennel> PET <C2>
        [C2 exists]
          S: 006 <kennel> <C1> <C2>
        [C2 doesnât exist & C1 == C2]
          S->C1: 105 <kennel> <C2>
        [Bad command usage]
          C: CMD <kennel> PET 
          S->C1: 100 <kennel>
        [AFM status]
          S->C:101 <kennel>

      Description:
        Display on every kennel a message that signal the client pet the client
        corresponding to the given name.

      Complementary informations:
        More advanced version may include an argument to display a custom 
        message.

                    ,              ,.==*Y;;=.,_            
                     `*+,,.,,.==*` .w*``      "**-          
                          ``"*===*"`   

    2.1.2.7 SNIFF 
      Arguments: none

      Restrictions: none

      Formats: 
        C: CMD <kennel> SNIFF
        S: 008 <kennel> <C1[,C2,C3,...]>

      Description: List all connected clients in the current kennel

      Complementary informations:
        More advanced version may include an argument to specify the kennel or
        kennels.

                    ,              ,.==*Y;;=.,_            
                     `*+,,.,,.==*` .w*``      "**-          
                          ``"*===*"`   

    2.1.2.8 LICK
      Arguments: kennel, name

      Restrictions:
        Client status must be different from AFM.
        The username must correspond to an existing client.
        The kennel name must be valid (18 alpha chars max).
        If the kennel exists, the client must be member of it.

      Formats:
        [Normal use]
          C1: CMD <kennel> LICK <kennel1> <C2>
          S->C2: 009 <kennel> <C1> <kennel1>
        [Acceptation]
          C2->S: CMD <kennel> ACCEPT_LICK <kennel1> <C1> 
          S->C1: 201 <kennel1> <C2> 
        [Refusal]
          C2->S: CMD <kennel> REFUSE_LICK <kennel1> <C1> 
          S->C1: 301 <kennel1> <C2> 
        [Already attributed kennel name &
         not member of the kennel]
          C: CMD <kennel> LICK <kennel1> <C2>
          S->C1: 106 <kennel1>
        [C2 does not exist & C1 == C2]
          C: CMD <kennel> LICK <kennel1> <C2>
          S: 105 <kennel> <C2>
        [Invalid kennel name]
          S->C1: 110 <kennel> <kennel1>
        [Bad command usage]
          C: CMD <kennel> LICK 
          S->C1: 100 <kennel>
        [AFM status]
          S->C1: 101 <kennel>

      Description: 
        Invite to/Start a private kennel with the specified client(s). Note that 
        the kennel is created if it doesn't already exist.
        The choice of joining the private kennel is made by C2. 
        In case of an acceptation, the kennel is created and C2 can chat on 
        that kennel too. If the porposition is declined, C2 do not join 
        the private kennel and C1 is notified of the refusal.

      Complementary informations: none

                    ,              ,.==*Y;;=.,_            
                     `*+,,.,,.==*` .w*``      "**-          
                          ``"*===*"`   

    2.1.2.9 BITE
      Arguments: none

      Restrictions:
        Client status must be different from AFM.
        May only be given when the client is in a private kennel.

      Formats:
        [C is in a private kennel]
          C: CMD <kennel> BITE
          S: 010 <kennel> <C>
        [C is not in a private kennel]
          C: CMD <kennel> BITE
          S: 107 <kennel> <C>
        [AFM status]
          S->C:101 <kennel>

      Description: 
        Leave the current private kennel.

      Complementary informations:
        More advanced version may include an argument to display a custom 
        message.
        The current version will ignore everything that may follow the word 
        BITE.

                    ,              ,.==*Y;;=.,_            
                     `*+,,.,,.==*` .w*``      "**-          
                          ``"*===*"`   

    2.1.2.10 FETCH 
      Arguments: file_infos, port, name
        
      Restrictions:
        Client status must be different from AFM. 
        The file must be a valid file (exists and have enough right).
        The name must correspond to an existing client.
        Port must be a valid port number (between 1 and 65535).

      Formats:
        C1: CMD <kennel> FETCH <C2> <port> <file_infos>
        S->C2: 011 <kennel> <C1> <C1 ip> <port> <file_infos>
        [Acceptation]
          C2->S: CMD <kennel> ACCEPT_FETCH <C1> <file_infos>
          S->C1: 202 <C2> <file_infos>
          [Communication impossible]
          C1->S: CMD <kennel> IMPOSSIBLE_FETCH <C2> <file_infos>
          S->C2: 108 <C1> <file_infos>
          [Invalid file]
          C1->C2: 109 <file_infos>
        [Refusal]
          C2->S: CMD <kennel> REFUSE_FETCH <C1> <file_infos>
          S->C1: 302 <C2> <file_infos>
        [C2 does not exist & C1 == C2]
          C: CMD <kennel> LICK <kennel1> <C2>names = data.split(" ")
          S: 105 <kennel> <C2>
        [Bad command usage]
          C: CMD <kennel> FETCH
          S: 100 <kennel>
        [AFM status]
          S->C:101 <kennel> 

      Description:
        Ask a specified client to initiate a file transfer.

      Complementary informations:
        In case C1 can't establish a communication with C2, C1 sends a message 
        to the server with the code 108 to inform the other client of the 
        communication failure. Upon the acceptation of the second client, the 
        client hosting the file must check if the file is valid and send the 
        code 112 along with the file informations if the file appear to 
        be invalid.

                    ,              ,.==*Y;;=.,_            
                     `*+,,.,,.==*` .w*``      "**-          
                          ``"*===*"`   

    2.1.2.11 HELP 
      Arguments: none

      Restrictions: none

      Formats:
        C: CMD <kennel> HELP
        S: 012 <kennel> <CMD1[,CMD2,CMD3,...]>

      Description:
        Return the list of the commands available on the server that are not
        the ones listed above. (This include modified version of the previous
        commands).

      Complementary informations: none

                    ,              ,.==*Y;;=.,_            
                     `*+,,.,,.==*` .w*``      "**-          
                          ``"*===*"`   

    2.1.2.12 Unknown command 
      Arguments: /

      Restrictions: /

      Formats:
        C: CMD <kennel> <unkown cmd>
        S: 404 <kennel> <unkown cmd>

      Description:
        Every command that is not recognize by a server shall be returned with
        the code 404.

      Complementary informations: none

2.2 Simple messages

  The format used by all client shall be "MSG" followed by the string entered
  by the client. That string shall be stripped of all space characters that 
  that preceed the first non space character or follow the last non space
  character. The message ends with CRLF (Carriage Return/Line Feed)
  
  Restrictions : 140 chars max, client status must be different from AFM.

  Format :
      C: MSG <kennel> <message>
      S: 000 <kennel> <C> <message>
  Format of server message :
      S: 000 <kennel> "!" <message>

2.3 Operating specifications

CMD is the flag for commands
MSG is the flag for simple messages

Server: Process messages data on the key word (CMD/MSG)

Restrictions:
  username: alphanum, length : 3 chars minimun, 12 chars maximum
  kennel: alphanum, length : 3 chars minimum, 18 chars maximum
  message: can contain up to 140 characters. End with CRLF 
  (Carriage Return/Line Feed).
  file: considered as Bytes

File transfert protocol: TCP 
The reason for choosing TCP over UDP is that on hand youâve got proper P2P 
connections with UDP, but you have to implement your own flow control 
and reliability algorithms. On the other hand, TCP P2P connections seem 
very tricky to setup and arenât supported on many routers but TCP provides 
greater security in the transfert as it is more reliable than UDP.

For the file transfert, the file will be considered as Bytes and send by TCP 
connection between the 2 clients through their respective ips and ports
selected during the acceptance procedure of transfert (see the FETCH command).
    __         __ _                    
   / /   ___  / /( )_____   ____ _____ 
  / /   / _ \/ __/// ___/  / __ `/ __ \
 / /___/  __/ /_  (__  )  / /_/ / /_/ /
/_____/\___/\__/ /____/   \__, /\____/ 
                         /____/        
                                             ^
                                            //\
                                               \
                          \\              .__=. \
                           \____        ,' -(@)\-\<)
                            \__ \      (_______/_:\
                           >==.\ \___,'  /# #\ | : \____
                             ,\\\___/|_|##(O)##| `./\---.
                            / ,`--'   ,======'//, //.\ . \
                           ( ______)_//<_> O////  ( (@O ) )
                            (________/ ====='o'    \ `-' /
                             `----'                 `---' 
